import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../../../core/theme/app_theme.dart';
import '../../../shared/models/transaction_job.dart';

class TransactionListItem extends StatelessWidget {
  final TransactionJob transaction;

  const TransactionListItem({
    Key? key,
    required this.transaction,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // Parse payload
    String payloadString = '';
    try {
      if (transaction.payload is String) {
        payloadString = transaction.payload as String;
      } else if (transaction.payload is Map<String, dynamic>) {
        payloadString = transaction.payload.toString();
      }
    } catch (e) {
      payloadString = '';
    }

    // Try to extract important information
    String to = 'Unknown';
    String amount = 'Unknown';
    String type = 'Unknown';

    try {
      final Map<String, dynamic> payload = transaction.payload;
      type = payload['type'] as String? ?? 'Unknown';
      to = payload['to'] as String? ?? 'Unknown';
      amount = payload['amount'] as String? ?? 'Unknown';
    } catch (e) {
      // Just use defaults if extraction fails
    }

    return Container(
      decoration: BoxDecoration(
        color: AppTheme.cardColor,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                _buildStatusIcon(),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Bridge Transaction',
                        style: TextStyle(
                          color: AppTheme.textPrimary,
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        'From ${_getChainName(transaction.fromChainId)} to ${_getChainName(transaction.toChainId)}',
                        style: TextStyle(
                          color: AppTheme.textSecondary,
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                ),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.end,
                  children: [
                    Text(
                      amount,
                      style: TextStyle(
                        color: AppTheme.textPrimary,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      
